# creating trace file at 2017-06-29 07:45:10.109
from hdbcli import dbapi
import binascii
from datetime import datetime, date, time
import sys

_DBADDRESS_='localhost'
_DBPORT_=31415
_DBUSER_='SYSTEM'
_DBPW_='MANAGER'
try:
    _DBADDRESS_ = sys.argv[1]
    _DBPORT_ = int(sys.argv[2])
    _DBUSER_ = sys.argv[3]
    _DBPW_ = sys.argv[4]
except:
    pass


conn = dbapi.connect('vanpghana11.pgdev.sap.corp', 31415, 'system', 'manager') 


#s = binascii.unhexlify(e)
#s = binascii.a2b_hex(e)


#Check if database connection was successful or not 
print conn.isconnected() 


cursor = conn.cursor() 

#print 'Statement: ' + stmnt

try:
	cursor.execute(''' {CALL PLANVIZ_ACTION(?,?)} ''', (208, u'''select * from (SELECT\x0A/* \x0A\x0A[NAME]\x0A\x0A- HANA_Memory_TopConsumers_History_Vertical_1.00.90+_ESS\x0A\x0A[DESCRIPTION]\x0A\x0A- Areas in history with highest memory requirements (tables, heap, ...)\x0A- Output is arranged vertically\x0A\x0A[SOURCE]\x0A\x0A- SAP Note 1969700\x0A\x0A[DETAILS AND RESTRICTIONS]\x0A\x0A- HOST_HEAP_ALLOCATORS only contains allocators with INCLUSIVE_SIZE_IN_USE > 1 GB, so the sum of used\x0A  memory displayed can be smaller than expected\x0A- HOST_RS_INDEXES only available with Rev. 90 and higher and ESS\x0A- KEY_FIGURE = \'ALLOCATED\' reports the memory allocated over time and not the currently allocated memory\x0A- "Row Store (Ext. Fragmentation)" does not consider all possible fragmentation effects because a consistent join of\x0A  M_RS_MEMORY and M_RS_TABLES histories is not easily possible\x0A\x0A[VALID FOR]\x0A\x0A- Revisions:              >= 1.00.90\x0A- Statistics server type: ESS\x0A\x0A[SQL COMMAND VERSION]\x0A\x0A- 2014/03/06:  1.0 (initial version)\x0A- 2015/04/27:  1.1 (ONLY_SQL_DATA_AREAS included)\x0A- 2015/09/10:  1.2 (dedicated statement for Rev. >= 90 and ESS)\x0A- 2016/06/15:  1.3 (Top 5 -> Top 10)\x0A- 2016/08/14:  1.4 (dedicated vertical output variant)\x0A- 2016/12/31:  1.5 (TIME_AGGREGATE_BY = \'TS<seconds>\' included)\x0A- 2017/03/09:  1.6 (EXCLUDE_SQL_DATA_AREAS included)\x0A\x0A[INVOLVED TABLES]\x0A\x0A- HOST_HEAP_ALLOCATORS\x0A- HOST_COLUMN_TABLES_PART_SIZE\x0A- GLOBAL_ROWSTORE_TABLES_SIZE\x0A- HOST_RS_INDEXES\x0A\x0A[INPUT PARAMETERS]\x0A\x0A- BEGIN_TIME\x0A\x0A  Begin time\x0A\x0A  TO_TIMESTAMP(\'2014/06/05 14:05:00\', \'YYYY/MM/DD HH24:MI:SS\') --> Set begin time to 5th of June 2014, 14:05 \x0A  ADD_DAYS(CURRENT_TIMESTAMP, -2)                              --> Set begin time to two days before current time \x0A\x0A- END_TIME\x0A\x0A  End time\x0A\x0A  TO_TIMESTAMP(\'2014/06/08 14:05:00\', \'YYYY/MM/DD HH24:MI:SS\') --> Set end time to 8th of June 2014, 14:05 \x0A  CURRENT_TIMESTAMP                                            --> Set end time to current tim\x0A\x0A- HOST\x0A\x0A  Host name\x0A\x0A  \'saphana01\'     --> Specic host saphana01\x0A  \'saphana%\'      --> All hosts starting with saphana\x0A  \'%\'             --> All hosts\x0A\x0A- PORT\x0A\x0A  Port number\x0A\x0A  \'30007\'         --> Port 30007\x0A  \'%03\'           --> All ports ending with \'03\'\x0A  \'%\'             --> No restriction to ports\x0A\x0A- SCHEMA_NAME\x0A\x0A  Schema name or pattern\x0A\x0A  \'SAPSR3\'        --> Specific schema SAPSR3\x0A  \'SAP%\'          --> All schemata starting with \'SAP\'\x0A  \'%\'             --> All schemata\x0A\x0A- AREA\x0A\x0A  Memory area\x0A\x0A  \'ROW\'           --> Row store\x0A  \'COLUMN\'        --> Column store\x0A  \'HEAP\'          --> Heap area\x0A  \'%\'             --> No memory area restriction\x0A\x0A- SUBAREA\x0A\x0A  Memory sub-area\x0A\x0A  \'Row Store (Tables)\' --> Only show row store tables\x0A  \'Heap (System)\'      --> Only show memory areas related to heap component \'System\'\x0A  \'%\'                  --> No restriction related to memory sub area\x0A\x0A- DETAIL\x0A\x0A  Memory area detail (e.g. table name, heap area)\x0A\x0A  \'KONV\'          --> Information related to detail KONV (table name on column store)\x0A  \'%\'             --> No restriction to memory area details\x0A\x0A- ONLY_SQL_DATA_AREAS\x0A\x0A  Possibility to restrict results to heap areas linked to SQL statement data processing\x0A\x0A  \'X\'             --> Only display heap areas linked to SQL statement data processing\x0A  \' \'             --> No restriction related to SQL statement data processing areas\x0A\x0A- EXCLUDE_SQL_DATA_AREAS\x0A\x0A  Possibility to restrict results to heap areas not linked to SQL statement data processing\x0A\x0A  \'X\'             --> Only display heap areas not linked to SQL statement data processing\x0A  \' \'             --> No restriction related to SQL statement data processing areas\x0A\x0A- MIN_TOTAL_SIZE_GB\x0A\x0A  Lower limit for total memory size (GB)\x0A\x0A  5               --> Only consider total sizes of at least 5 GB\x0A  -1              --> No restriction related to size\x0A\x0A- MIN_INDIVIDUAL_SIZE_GB\x0A\x0A  Lower limit for individual memory size (GB)\x0A\x0A  5               --> Only consider individual sizes of at least 5 GB\x0A  -1              --> No restriction related to size\x0A\x0A- AGGREGATE_BY\x0A\x0A  Aggregation criteria (possible values can be found in comment)\x0A\x0A  \'DETAIL\'        --> Aggregation by detail\x0A  \'HOST, SERVICE\' --> Aggregation by host and service (if multiple choices are possible)\x0A\x0A- KEY_FIGURE\x0A\x0A  Memory key figure (allocated memory, used memory, main memory, delta memory, ...)\x0A\x0A  \'USED\'          --> Used memory\x0A  \'ALLOCATED\'     --> Amount of memory allocated (and potentially deallocated) in the considered time frame, i.e. more a throughput than a size value\x0A  \'MAIN\'          --> Main memory\x0A  \'DELTA\'         --> Delta memory\x0A  \'MERGES\'        --> Number of delta merges\x0A  \'ROWS\'          --> Number of table records\x0A\x0A- OBJECT_LEVEL\x0A\x0A  Controls display of partitions\x0A\x0A  \'PARTITION\'     --> Result is shown on partition level\x0A  \'TABLE\'         --> Result is shown on table level\x0A\x0A- INCLUDE_OVERLAPPING_HEAP_AREAS\x0A\x0A  Controls the display of heap areas that are already covered differently (e.g. as part of column store, row store or stack)\x0A\x0A  \'X\'             --> Overlapping heap areas are included (memory can be accounted twice)\x0A  \' \'             --> Overlapping heap areas are excluded\x0A  \x0A- TIME_AGGREGATE_BY\x0A\x0A  Aggregation criteria (possible values can be found in comment)\x0A\x0A  \'HOUR\'          --> Aggregation by hour\x0A  \'YYYY/WW\'       --> Aggregation by calendar week\x0A  \'TS<seconds>\'   --> Time slice aggregation based on <seconds> seconds\x0A  \'NONE\'          --> No aggregation\x0A\x0A[OUTPUT PARAMETERS]\x0A\x0A- SNAPSHOT_TIME: Timestamp\x0A- KEY_FIGURE:    Memory key figure\x0A- VALUE_TOTAL:   Total value of memory key figure\x0A- DETAIL_<n>:    Top <n> detail area related to memory key figure, "-- Others --" for the sum of all heap allocators with a size below MIN_INDIVIDUAL_SIZE_GB\x0A- VALUE_<n>:     Memory key figure value of top <n> detail area\x0A- PCT_<n>:       Fraction of overall value occupied by top <n> detail area (%)\x0A\x0A[EXAMPLE OUTPUT]\x0A\x0A-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\x0A|SAMPLE_TIME     |KEY_FIGURE     |VALUE_TOTAL    |DETAIL_1                                                  |VALUE_1     |PCT_1|DETAIL_2                                                  |VALUE_2     |PCT_2|DETAIL_3                     |VALUE_3     |PCT_3|DETAIL_4                                                               |VALUE_4     |PCT_4|DETAIL_5                                                               |VALUE_5     |PCT_5|\x0A-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\x0A|2014/04/22 (TUE)|Space used (GB)|         408.55|Pool/PersistenceManager/PersistentSpace(0)/DefaultLPA/Page|       85.94|   21|Pool/RowEngine/QueryExecution                             |       79.43|   19|Pool/Statistics              |       57.76|   14|Pool/JoinEvaluator/TranslationTable                                    |       25.15|    6|AllocateOnlyAllocator-unlimited/FLA-UL<3145728,1>/MemoryMapLevel2Blocks|       17.11|    4|\x0A|2014/04/21 (MON)|Space used (GB)|         382.82|Pool/PersistenceManager/PersistentSpace(0)/DefaultLPA/Page|       90.44|   24|Pool/RowEngine/QueryExecution                             |       77.66|   20|Pool/Statistics              |       56.62|   15|Pool/RowEngine/SQLPlan                                                 |       18.71|    5|AllocateOnlyAllocator-unlimited/FLA-UL<3145728,1>/MemoryMapLevel2Blocks|       15.83|    4|\x0A|2014/04/20 (SUN)|Space used (GB)|         437.76|Pool/PersistenceManager/PersistentSpace(0)/DefaultLPA/Page|      126.20|   29|Pool/RowEngine/QueryExecution                             |       73.89|   17|Pool/Statistics              |       52.28|   12|Pool/AttributeEngine/idattribute/build-reverse-index                   |       24.48|    6|Pool/RowEngine/SQLPlan                                                 |       18.71|    4|\x0A|2014/04/19 (SAT)|Space used (GB)|         513.70|Pool/PersistenceManager/PersistentSpace(0)/DefaultLPA/Page|      133.29|   26|Pool/RowEngine/QueryExecution                             |      103.12|   20|Pool/Statistics              |       76.53|   15|Pool/AttributeEngine-IndexVector-Sp-Prefix                             |       20.07|    4|Pool/RowEngine/SQLPlan                                                 |       19.83|    4|\x0A|2014/04/18 (FRI)|Space used (GB)|         445.53|Pool/PersistenceManager/PersistentSpace(0)/DefaultLPA/Page|      112.35|   25|Pool/RowEngine/QueryExecution                             |       77.60|   17|Pool/Statistics              |       58.36|   13|Pool/RowEngine/SQLPlan                                                 |       18.99|    4|Pool/AttributeEngine/idattribute/build-reverse-index                   |       17.70|    4|\x0A|2014/04/17 (THU)|Space used (GB)|         363.30|Pool/RowEngine/QueryExecution                             |       72.54|   20|Pool/PersistenceManager/PersistentSpace(0)/DefaultLPA/Page|       62.99|   17|Pool/Statistics              |       57.10|   16|Pool/UdivListMgr/UdivListContainer                                     |       20.37|    6|Pool/RowEngine/SQLPlan                                                 |       20.01|    6|\x0A|2014/04/16 (WED)|Space used (GB)|         487.59|Pool/RowEngine/QueryExecution                             |      104.39|   21|Pool/PersistenceManager/PersistentSpace(0)/DefaultLPA/Page|       90.74|   19|Pool/Statistics              |       59.10|   12|Pool/JoinEvaluator/TranslationTable                                    |       38.21|    8|AllocateOnlyAllocator-unlimited/FLA-UL<3145728,1>/MemoryMapLevel2Blocks|       38.12|    8|\x0A|2014/04/15 (TUE)|Space used (GB)|         588.56|Pool/PersistenceManager/PersistentSpace(0)/DefaultLPA/Page|      168.21|   29|Pool/RowEngine/QueryExecution                             |       93.88|   16|Pool/Statistics              |       59.70|   10|AllocateOnlyAllocator-unlimited/FLA-UL<3145728,1>/MemoryMapLevel2Blocks|       38.12|    6|Pool/JoinEvaluator/TranslationTable                                    |       35.30|    6|\x0A|2014/04/14 (MON)|Space used (GB)|        3484.97|Pool/JoinEvaluator/JERequestedAttributes/Results          |     2795.20|   80|Pool/PersistenceManager/PersistentSpace(0)/DefaultLPA/Page|      234.23|    7|Pool/RowEngine/QueryExecution|       99.01|    3|Pool/Statistics                                                        |       59.21|    2|Pool/JoinEvaluator/JECreateNTuple                                      |       49.98|    1|\x0A|2014/04/13 (SUN)|Space used (GB)|         572.90|Pool/PersistenceManager/PersistentSpace(0)/DefaultLPA/Page|      175.60|   31|Pool/RowEngine/QueryExecution                             |      104.96|   18|Pool/Statistics              |       58.86|   10|Pool/AttributeEngine/idattribute/build-reverse-index                   |       27.80|    5|AllocateOnlyAllocator-unlimited/FLA-UL<3145728,1>/MemoryMapLevel2Blocks|       20.87|    4|\x0A|2014/04/12 (SAT)|Space used (GB)|         477.98|Pool/PersistenceManager/PersistentSpace(0)/DefaultLPA/Page|      111.76|   23|Pool/RowEngine/QueryExecution                             |       99.14|   21|Pool/Statistics              |       59.17|   12|Pool/JoinEvaluator/TranslationTable                                    |       24.37|    5|Pool/AttributeEngine/idattribute/build-reverse-index                   |       22.95|    5|\x0A|2014/04/11 (FRI)|Space used (GB)|         491.72|Pool/PersistenceManager/PersistentSpace(0)/DefaultLPA/Page|      119.74|   24|Pool/RowEngine/QueryExecution                             |       92.28|   19|Pool/Statistics              |       59.29|   12|Pool/JoinEvaluator/TranslationTable                                    |       24.10|    5|AllocateOnlyAllocator-unlimited/FLA-UL<3145728,1>/MemoryMapLevel2Blocks|       19.98|    4|\x0A|2014/04/10 (THU)|Space used (GB)|         463.47|Pool/PersistenceManager/PersistentSpace(0)/DefaultLPA/Page|      100.82|   22|Pool/RowEngine/QueryExecution                             |       94.05|   20|Pool/Statistics              |       59.17|   13|Pool/AttributeEngine/idattribute/build-reverse-index                   |       23.64|    5|Pool/JoinEvaluator/TranslationTable                                    |       21.33|    5|\x0A-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\x0A\x0A*/\x0A  SAMPLE_TIME SNAPSHOT_TIME,\x0A  KEY_FIGURE,\x0A  LPAD(TO_DECIMAL(VALUE_TOTAL_GB, 10, 2), 14) VALUE_TOTAL_GB,\x0A  DETAIL,\x0A  LPAD(TO_DECIMAL(VALUE_GB, 10, 2), 8) VALUE_GB,\x0A  LPAD(TO_DECIMAL(PERCENT, 10, 2), 7) PERCENT\x0AFROM\x0A( SELECT\x0A    SAMPLE_TIME,\x0A    KEY_FIGURE,\x0A    VALUE_TOTAL_GB,\x0A    CASE WHEN ( MIN_INDIVIDUAL_SIZE_GB = -1 OR VALUE_GB >= MIN_INDIVIDUAL_SIZE_GB ) THEN DETAIL ELSE \'-- Others --\' END DETAIL,\x0A    SUM(VALUE_GB) VALUE_GB,\x0A    SUM(PERCENT) PERCENT\x0A  FROM\x0A  ( SELECT DISTINCT\x0A      SAMPLE_TIME,\x0A      KEY_FIGURE_DESCRIPTION KEY_FIGURE,\x0A      SUM(VALUE_GB) OVER (PARTITION BY SAMPLE_TIME) VALUE_TOTAL_GB,\x0A      DETAIL,\x0A      VALUE_GB,\x0A      PERCENT,\x0A      MIN_TOTAL_SIZE_GB,\x0A      MIN_INDIVIDUAL_SIZE_GB\x0A    FROM\x0A    ( SELECT\x0A        SAMPLE_TIME,\x0A        DETAIL,\x0A        KEY_FIGURE_DESCRIPTION,\x0A        SUM(KEY_FIGURE) VALUE_GB,\x0A        MAP(SUM(KEY_FIGURE), 0, 0, SUM(KEY_FIGURE) / SUM(SUM(KEY_FIGURE)) OVER (PARTITION BY SAMPLE_TIME) * 100) PERCENT,\x0A        MIN_TOTAL_SIZE_GB,\x0A        MIN_INDIVIDUAL_SIZE_GB\x0A      FROM\x0A      ( SELECT\x0A          CASE \x0A            WHEN TIME_AGGREGATE_BY LIKE \'TS%\' THEN\x0A              TO_VARCHAR(ADD_SECONDS(TO_TIMESTAMP(\'2014/01/01 00:00:00\', \'YYYY/MM/DD HH24:MI:SS\'), FLOOR(SECONDS_BETWEEN(TO_TIMESTAMP(\'2014/01/01 00:00:00\', \x0A              \'YYYY/MM/DD HH24:MI:SS\'), SERVER_TIMESTAMP) / SUBSTR(TIME_AGGREGATE_BY, 3)) * SUBSTR(TIME_AGGREGATE_BY, 3)), \'YYYY/MM/DD HH24:MI:SS\')\x0A            ELSE TO_VARCHAR(SERVER_TIMESTAMP, TIME_AGGREGATE_BY)\x0A          END SAMPLE_TIME,\x0A          DETAIL,\x0A          KEY_FIGURE_DESCRIPTION,\x0A          AVG(KEY_FIGURE) KEY_FIGURE,\x0A          MIN_TOTAL_SIZE_GB,\x0A          MIN_INDIVIDUAL_SIZE_GB\x0A        FROM\x0A        ( SELECT\x0A            SERVER_TIMESTAMP,\x0A            DETAIL,\x0A            KEY_FIGURE_DESCRIPTION,\x0A            TIME_AGGREGATE_BY,\x0A            MIN_TOTAL_SIZE_GB,\x0A            MIN_INDIVIDUAL_SIZE_GB,\x0A            SUM(KEY_FIGURE) KEY_FIGURE\x0A          FROM\x0A          ( SELECT\x0A              D.SERVER_TIMESTAMP,\x0A              MAP(BI.AGGREGATE_BY, \'SCHEMA\', D.SCHEMA_NAME, \'HOST\', D.HOST, \'PORT\', TO_VARCHAR(D.PORT), \'AREA\', D.AREA, \'SUBAREA\', D.SUBAREA, \'DETAIL\',\x0A                MAP(BI.OBJECT_LEVEL, \'TABLE\', D.DETAIL,\x0A                  D.DETAIL || MAP(D.PART_ID, -1, \'\', 0, \'\', \' (P\' || D.PART_ID || \')\'))) DETAIL,\x0A              MAP(BI.KEY_FIGURE,\x0A                \'ALLOCATED\', \'Space allocated (GB)\',\x0A                \'USED\',      \'Space used (GB)\') KEY_FIGURE_DESCRIPTION,\x0A              MAP(BI.KEY_FIGURE, \x0A                \'ALLOCATED\', D.ALLOC_BYTE / 1024 / 1024 / 1024,\x0A                \'USED\',      D.USED_BYTE / 1024 / 1024 / 1024) KEY_FIGURE,\x0A              BI.TIME_AGGREGATE_BY,\x0A              BI.MIN_TOTAL_SIZE_GB,\x0A              BI.MIN_INDIVIDUAL_SIZE_GB         \x0A            FROM\x0A              ( SELECT\x0A                  SCHEMA_NAME,\x0A                  DETAIL,\x0A                  HOST,\x0A                  PORT,\x0A                  AREA,\x0A                  SUBAREA,\x0A                  ONLY_SQL_DATA_AREAS,\x0A                  EXCLUDE_SQL_DATA_AREAS,\x0A                  MIN_TOTAL_SIZE_GB,\x0A                  MIN_INDIVIDUAL_SIZE_GB,\x0A                  AGGREGATE_BY,\x0A                  BEGIN_TIME,\x0A                  END_TIME,\x0A                  KEY_FIGURE,\x0A                  OBJECT_LEVEL,\x0A                  MAP(TIME_AGGREGATE_BY,\x0A                    \'NONE\',        \'YYYY/MM/DD HH24:MI:SS\',\x0A                    \'HOUR\',        \'YYYY/MM/DD HH24\',\x0A                    \'DAY\',         \'YYYY/MM/DD (DY)\',\x0A                    \'HOUR_OF_DAY\', \'HH24\',\x0A                    TIME_AGGREGATE_BY ) TIME_AGGREGATE_BY,\x0A                  INCLUDE_OVERLAPPING_HEAP_AREAS\x0A                FROM\x0A                ( SELECT                                                      /* Modification section */\x0A                    TO_TIMESTAMP(\'1000/05/15 02:00:00\', \'YYYY/MM/DD HH24:MI:SS\') BEGIN_TIME,\x0A                    TO_TIMESTAMP(\'9999/05/20 03:00:00\', \'YYYY/MM/DD HH24:MI:SS\') END_TIME,\x0A                    \'%\' HOST,\x0A                    \'31403\' PORT,\x0A                    \'%\' SCHEMA_NAME,\x0A                    \'%\' AREA,                     /* ROW, COLUMN, TABLES, HEAP, % */\x0A                    \'%\' SUBAREA,                  /* \'Row Store (Tables)\', \'Row store (Indexes)\', \'Row Store (Int. Fragmentation)\', \'Row Store (Ext. Fragmentation)\', \'Column Store (Main)\', \'Column Store (Delta)\', \'Column Store (Others)\' or \'Heap (<component>)\' */\x0A                    \'Pool/RowEngine/QueryCompilation\' DETAIL,                   /* Name of table or heap area */\x0A                    \' \' ONLY_SQL_DATA_AREAS,\x0A                    \' \' EXCLUDE_SQL_DATA_AREAS,\x0A                    -1 MIN_TOTAL_SIZE_GB,\x0A                    -1 MIN_INDIVIDUAL_SIZE_GB,\x0A                    \'USED\' KEY_FIGURE,            /* ALLOCATED, USED */ \x0A                    \'TABLE\' OBJECT_LEVEL,         /* TABLE, PARTITION */\x0A                    \' \' INCLUDE_OVERLAPPING_HEAP_AREAS,\x0A                    \'DETAIL\' AGGREGATE_BY,        /* SCHEMA, DETAIL, HOST, PORT, AREA, SUBAREA */\x0A                    \'TS300\' TIME_AGGREGATE_BY     /* HOUR, DAY, HOUR_OF_DAY or database time pattern, TS<seconds> for time slice, NONE for no aggregation */\x0A                  FROM\x0A                    DUMMY\x0A                ) \x0A              ) BI,\x0A              ( SELECT\x0A                  \'COLUMN\' AREA,\x0A                  L.SUBAREA,\x0A                  CT.SERVER_TIMESTAMP,\x0A                  CT.SCHEMA_NAME,\x0A                  CT.TABLE_NAME DETAIL,\x0A                  CT.PART_ID,\x0A                  CT.HOST,\x0A                  CT.PORT,\x0A                  CT.RECORD_COUNT NUM_ROWS,\x0A                  CASE L.SUBAREA\x0A                    WHEN \'Column Store (Others)\' THEN CT.MEMORY_SIZE_IN_TOTAL - CT.MEMORY_SIZE_IN_MAIN - CT.MEMORY_SIZE_IN_DELTA\x0A                    WHEN \'Column Store (Main)\'   THEN CT.MEMORY_SIZE_IN_MAIN\x0A                    WHEN \'Column Store (Delta)\'  THEN CT.MEMORY_SIZE_IN_DELTA\x0A                  END ALLOC_BYTE,\x0A                  CASE L.SUBAREA\x0A                    WHEN \'Column Store (Others)\' THEN CT.MEMORY_SIZE_IN_TOTAL - CT.MEMORY_SIZE_IN_MAIN - CT.MEMORY_SIZE_IN_DELTA\x0A                    WHEN \'Column Store (Main)\'   THEN CT.MEMORY_SIZE_IN_MAIN\x0A                    WHEN \'Column Store (Delta)\'  THEN CT.MEMORY_SIZE_IN_DELTA\x0A                  END USED_BYTE\x0A                FROM\x0A                ( SELECT \'Column Store (Others)\' SUBAREA FROM DUMMY UNION ALL\x0A                  SELECT \'Column Store (Main)\'           FROM DUMMY UNION ALL\x0A                  SELECT \'Column Store (Delta)\'          FROM DUMMY\x0A                ) L,\x0A                  _SYS_STATISTICS.HOST_COLUMN_TABLES_PART_SIZE CT\x0A                UNION ALL\x0A                ( SELECT\x0A                    \'ROW\' AREA,\x0A                    \'Row Store (Tables)\' SUBAREA,\x0A                    TO_TIMESTAMP(TO_VARCHAR(RT.SERVER_TIMESTAMP, \'YYYY/MM/DD HH24\')) SERVER_TIMESTAMP,\x0A                    RT.SCHEMA_NAME,\x0A                    RT.TABLE_NAME DETAIL,\x0A                    0 PART_ID,\x0A                    RT.HOST,\x0A                    RT.PORT,\x0A                    RT.RECORD_COUNT NUM_ROWS,\x0A                    RT.ALLOCATED_FIXED_PART_SIZE + RT.ALLOCATED_VARIABLE_PART_SIZE ALLOC_BYTE,\x0A                    RT.USED_FIXED_PART_SIZE + RT.USED_VARIABLE_PART_SIZE USED_BYTE\x0A                  FROM\x0A                    _SYS_STATISTICS.GLOBAL_ROWSTORE_TABLES_SIZE RT\x0A                )\x0A                UNION ALL\x0A                ( SELECT\x0A                    \'ROW\' AREA,\x0A                    \'Row Store (Int. Fragmentation)\' SUBAREA,\x0A                    TO_TIMESTAMP(TO_VARCHAR(RT.SERVER_TIMESTAMP, \'YYYY/MM/DD HH24\')) SERVER_TIMESTAMP,\x0A                    \' \',\x0A                    \'Row store (Int. Fragmentation)\',\x0A                    0 PART_ID,\x0A                    RT.HOST,\x0A                    RT.PORT,\x0A                    0 NUM_ROWS,\x0A                    SUM(RT.ALLOCATED_FIXED_PART_SIZE + RT.ALLOCATED_VARIABLE_PART_SIZE - RT.USED_FIXED_PART_SIZE - RT.USED_VARIABLE_PART_SIZE ) ALLOC_BYTE,\x0A                    SUM(RT.ALLOCATED_FIXED_PART_SIZE + RT.ALLOCATED_VARIABLE_PART_SIZE - RT.USED_FIXED_PART_SIZE - RT.USED_VARIABLE_PART_SIZE ) USED_BYTE\x0A                  FROM\x0A                    _SYS_STATISTICS.GLOBAL_ROWSTORE_TABLES_SIZE RT\x0A                  GROUP BY\x0A                    SERVER_TIMESTAMP,\x0A                    HOST,\x0A                    PORT\x0A                )\x0A                UNION ALL\x0A                ( SELECT\x0A                    \'ROW\' AREA,\x0A                    \'Row Store (Indexes)\' SUBAREA,\x0A                    TO_TIMESTAMP(TO_VARCHAR(RT.SERVER_TIMESTAMP, \'YYYY/MM/DD HH24\')) SERVER_TIMESTAMP,\x0A                    RT.SCHEMA_NAME,\x0A                    RT.TABLE_NAME DETAIL,\x0A                    0 PART_ID,\x0A                    RT.HOST,\x0A                    RT.PORT,\x0A                    0 NUM_ROWS,\x0A                    RT.INDEX_SIZE ALLOC_BYTE,\x0A                    RT.INDEX_SIZE USED_BYTE\x0A                  FROM\x0A                    _SYS_STATISTICS.HOST_RS_INDEXES RT\x0A                )\x0A                UNION ALL\x0A                ( SELECT\x0A                    \'HEAP\',\x0A                    \'Heap\' || CHAR(32) || \'(\' || HA.COMPONENT || \x0A                      CASE WHEN HA.CATEGORY LIKE \'Pool/PersistenceManager/PersistentSpace/DefaultLPA%/Page\' THEN CHAR(32) || \'-\' || CHAR(32) || \'Page Cache\' ELSE \'\' END || \')\' SUBAREA,\x0A                    HA.SERVER_TIMESTAMP,\x0A                    \' \' SCHEMA_NAME,\x0A                    HA.CATEGORY,\x0A                    0 PART_ID,\x0A                    HA.HOST,\x0A                    HA.PORT,\x0A                    HA.EXCLUSIVE_ALLOCATED_COUNT NUM_ROWS,\x0A                    HA.EXCLUSIVE_ALLOCATED_SIZE - LEAD(HA.EXCLUSIVE_ALLOCATED_SIZE, 1) OVER (PARTITION BY CATEGORY, HOST, PORT ORDER BY SERVER_TIMESTAMP DESC),\x0A                    HA.EXCLUSIVE_SIZE_IN_USE\x0A                  FROM\x0A                    _SYS_STATISTICS.HOST_HEAP_ALLOCATORS HA\x0A                )\x0A                UNION ALL\x0A                ( SELECT\x0A                    \'ROW\' AREA,\x0A                    \'Row Store (Ext. Fragmentation)\' SUBAREA,\x0A                    TO_TIMESTAMP(TO_VARCHAR(SERVER_TIMESTAMP, \'YYYY/MM/DD HH24\')) SERVER_TIMESTAMP,\x0A                    \' \',\x0A                    \'Row Store (Ext. Fragmentation)\',\x0A                    0,\x0A                    HOST,\x0A                    PORT,\x0A                    0,\x0A                    SUM(FREE_SIZE),\x0A                    SUM(FREE_SIZE)\x0A                  FROM\x0A                    _SYS_STATISTICS.HOST_RS_MEMORY\x0A                  WHERE\x0A                    CATEGORY IN (\'CATALOG\', \'TABLE\')\x0A                  GROUP BY\x0A                    SERVER_TIMESTAMP,\x0A                    HOST,\x0A                    PORT\x0A                )\x0A                UNION ALL\x0A                ( SELECT\x0A                    \'CODE\' AREA,\x0A                    \'Code\' SUBAREA,\x0A                    SM.SERVER_TIMESTAMP,\x0A                    \' \' SCHEMA_NAME,\x0A                    \'CODE\' CATEGORY,\x0A                    0 PART_ID,\x0A                    SM.HOST,\x0A                    SM.PORT,\x0A                    0 NUM_ROWS,\x0A                    AVG(SM.CODE_SIZE) OVER (PARTITION BY SM.HOST, SM.SERVER_TIMESTAMP) / COUNT(*) OVER (PARTITION BY SM.HOST, SM.SERVER_TIMESTAMP),\x0A                    AVG(SM.CODE_SIZE) OVER (PARTITION BY SM.HOST, SM.SERVER_TIMESTAMP) / COUNT(*) OVER (PARTITION BY SM.HOST, SM.SERVER_TIMESTAMP)\x0A                  FROM\x0A                    _SYS_STATISTICS.HOST_SERVICE_MEMORY SM\x0A                )\x0A                UNION ALL\x0A                ( SELECT\x0A                    \'STACK\' AREA,\x0A                    \'Stack\' SUBAREA,\x0A                    SM.SERVER_TIMESTAMP,\x0A                    \' \' SCHEMA_NAME,\x0A                    \'STACK\' CATEGORY,\x0A                    0 PART_ID,\x0A                    SM.HOST,\x0A                    SM.PORT,\x0A                    0 NUM_ROWS,\x0A                    SM.STACK_SIZE,\x0A                    SM.STACK_SIZE\x0A                  FROM\x0A                    _SYS_STATISTICS.HOST_SERVICE_MEMORY SM\x0A                )\x0A              ) D      \x0A            WHERE\x0A              D.SCHEMA_NAME LIKE BI.SCHEMA_NAME AND\x0A              D.DETAIL LIKE BI.DETAIL AND\x0A              D.HOST LIKE BI.HOST AND\x0A              TO_VARCHAR(D.PORT) LIKE BI.PORT AND\x0A              D.SERVER_TIMESTAMP BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND\x0A              ( BI.AREA = \'TABLES\' AND D.AREA IN (\'ROW\', \'COLUMN\') OR\x0A                D.AREA LIKE BI.AREA ) AND\x0A              UPPER(D.SUBAREA) LIKE UPPER(BI.SUBAREA) AND\x0A              ( BI.INCLUDE_OVERLAPPING_HEAP_AREAS = \'X\' OR\x0A                D.AREA != \'HEAP\' OR\x0A                ( D.DETAIL NOT LIKE \'Pool/AttributeEngine%\' AND\x0A                  D.DETAIL NOT LIKE \'Pool/ColumnStoreTables%\' AND\x0A                  D.DETAIL NOT IN\x0A                  ( \'Pool/malloc/libhdbcstypes.so\',\x0A                    \'Pool/NameIdMapping/RoDict\',\x0A                    \'Pool/RowEngine/CpbTree\',\x0A                    \'Pool/RowStoreTables/CpbTree\',\x0A                    \'Pool/SerializedObject\',\x0A                    \'StackAllocator\'\x0A                  )\x0A                ) \x0A              ) AND\x0A              ( BI.ONLY_SQL_DATA_AREAS = \' \' OR\x0A                D.DETAIL IN \x0A                ( \'Pool/itab\',\x0A                  \'Pool/itab/VectorColumn\',\x0A                  \'Pool/JoinEvaluator\',\x0A                  \'Pool/JoinEvaluator/JEAssembleResults\',\x0A                  \'Pool/JoinEvaluator/JEAssembleResults/Results\',\x0A                  \'Pool/JoinEvaluator/JECalculate\',\x0A                  \'Pool/JoinEvaluator/JECalculate/Results\',\x0A                  \'Pool/JoinEvaluator/JECreateNTuple\',\x0A                  \'Pool/JoinEvaluator/JEPlanData/deserialized\',\x0A                  \'Pool/JoinEvaluator/JEPreAggregate\',\x0A                  \'Pool/JoinEvaluator/JERequestedAttributes/Results\',\x0A                  \'Pool/JoinEvaluator/JEStep1\',\x0A                  \'Pool/JoinEvaluator/JEStep2\',\x0A                  \'Pool/JoinEvaluator/NTuple\',\x0A                  \'Pool/JoinEvaluator/PlanDataAttrVals/Deserialized\',\x0A                  \'Pool/JoinEvaluator/ValueList\',\x0A                  \'Pool/malloc/libhdbevaluator.so\',\x0A                  \'Pool/mds\',\x0A                  \'Pool/parallel/aggregates\', \x0A                  \'Pool/parallel/align\', \x0A                  \'Pool/parallel/compactcol\', \x0A                  \'Pool/parallel/ihm\',\x0A                  \'Pool/parallel/pop\',\x0A                  \'Pool/parallel/temp_aggregates\',\x0A                  \'Pool/parallel/temp_dimensions\',\x0A                  \'Pool/parallel/temp_other\',\x0A                  \'Pool/RowEngine/LOB\',\x0A                  \'Pool/RowEngine/MonitorView\',\x0A                  \'Pool/RowEngine/QueryExecution\', \x0A                  \'Pool/SearchAPI/Itab Search\',\x0A                  \'Pool/StringContainer\',\x0A                  \'Pool/ValueArray\' )\x0A              ) AND\x0A              ( BI.EXCLUDE_SQL_DATA_AREAS = \' \' OR\x0A                D.DETAIL NOT IN \x0A                ( \'Pool/itab\',\x0A                  \'Pool/itab/VectorColumn\',\x0A                  \'Pool/JoinEvaluator\',\x0A                  \'Pool/JoinEvaluator/JEAssembleResults\',\x0A                  \'Pool/JoinEvaluator/JEAssembleResults/Results\',\x0A                  \'Pool/JoinEvaluator/JECalculate\',\x0A                  \'Pool/JoinEvaluator/JECalculate/Results\',\x0A                  \'Pool/JoinEvaluator/JECreateNTuple\',\x0A                  \'Pool/JoinEvaluator/JEPlanData/deserialized\',\x0A                  \'Pool/JoinEvaluator/JEPreAggregate\',\x0A                  \'Pool/JoinEvaluator/JERequestedAttributes/Results\',\x0A                  \'Pool/JoinEvaluator/JEStep1\',\x0A                  \'Pool/JoinEvaluator/JEStep2\',\x0A                  \'Pool/JoinEvaluator/NTuple\',\x0A                  \'Pool/JoinEvaluator/PlanDataAttrVals/Deserialized\',\x0A                  \'Pool/JoinEvaluator/ValueList\',\x0A                  \'Pool/malloc/libhdbevaluator.so\',\x0A                  \'Pool/mds\',\x0A                  \'Pool/parallel/aggregates\', \x0A                  \'Pool/parallel/align\', \x0A                  \'Pool/parallel/compactcol\', \x0A                  \'Pool/parallel/ihm\',\x0A                  \'Pool/parallel/pop\',\x0A                  \'Pool/parallel/temp_aggregates\',\x0A                  \'Pool/parallel/temp_dimensions\',\x0A                  \'Pool/parallel/temp_other\',\x0A                  \'Pool/RowEngine/LOB\',\x0A                  \'Pool/RowEngine/MonitorView\',\x0A                  \'Pool/RowEngine/QueryExecution\', \x0A                  \'Pool/SearchAPI/Itab Search\',\x0A                  \'Pool/StringContainer\',\x0A                  \'Pool/ValueArray\' )\x0A              )\x0A          )\x0A          WHERE\x0A            KEY_FIGURE > 0\x0A          GROUP BY\x0A            SERVER_TIMESTAMP,\x0A            DETAIL,\x0A            KEY_FIGURE_DESCRIPTION,\x0A            TIME_AGGREGATE_BY,\x0A            MIN_TOTAL_SIZE_GB,\x0A            MIN_INDIVIDUAL_SIZE_GB\x0A        )\x0A        GROUP BY\x0A          CASE \x0A            WHEN TIME_AGGREGATE_BY LIKE \'TS%\' THEN\x0A              TO_VARCHAR(ADD_SECONDS(TO_TIMESTAMP(\'2014/01/01 00:00:00\', \'YYYY/MM/DD HH24:MI:SS\'), FLOOR(SECONDS_BETWEEN(TO_TIMESTAMP(\'2014/01/01 00:00:00\', \x0A              \'YYYY/MM/DD HH24:MI:SS\'), SERVER_TIMESTAMP) / SUBSTR(TIME_AGGREGATE_BY, 3)) * SUBSTR(TIME_AGGREGATE_BY, 3)), \'YYYY/MM/DD HH24:MI:SS\')\x0A            ELSE TO_VARCHAR(SERVER_TIMESTAMP, TIME_AGGREGATE_BY)\x0A          END,\x0A          DETAIL,\x0A          KEY_FIGURE_DESCRIPTION,\x0A          MIN_TOTAL_SIZE_GB,\x0A          MIN_INDIVIDUAL_SIZE_GB\x0A      )\x0A      GROUP BY\x0A        SAMPLE_TIME,\x0A        DETAIL,\x0A        KEY_FIGURE_DESCRIPTION,\x0A        MIN_TOTAL_SIZE_GB,\x0A        MIN_INDIVIDUAL_SIZE_GB\x0A    )\x0A  )\x0A  WHERE\x0A  ( MIN_TOTAL_SIZE_GB = -1 OR VALUE_TOTAL_GB >= MIN_TOTAL_SIZE_GB )\x0A  GROUP BY\x0A    SAMPLE_TIME,\x0A    KEY_FIGURE,\x0A    VALUE_TOTAL_GB,\x0A    CASE WHEN ( MIN_INDIVIDUAL_SIZE_GB = -1 OR VALUE_GB >= MIN_INDIVIDUAL_SIZE_GB ) THEN DETAIL ELSE \'-- Others --\' END\x0A)\x0AORDER BY\x0A  SAMPLE_TIME DESC,\x0A  VALUE_GB DESC\x0A)\x0A--order by SAMPLE_TIME'''))
except Exception,ex:  
	print '==== Got error at statement execution!'
	print ex, sys.exc_info()

cursor.close()



#print(s)
